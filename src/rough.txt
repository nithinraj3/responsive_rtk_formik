import React, { useState } from "react";
import {
  Container,
  makeStyles,
  Avatar,
  Typography,
  Grid,
  Paper,
  FormControlLabel,
  Button,
  Checkbox,
} from "@material-ui/core";

import { useHistory, useParams } from "react-router-dom";
import {
  useGetEmployeesQuery,
  useUpdateEmployeeMutation,
} from "../../redux/redux/usersApi";
import { toast } from "react-toastify";
import PersonAddIcon from "@material-ui/icons/PersonAdd";
import { Formik, Form } from "formik";
import * as Yup from "yup";
import TextField from "../FormUI/Textfield";
import RadioForm from "../FormUI/RadioForm";
import Select from "../FormUI/Select";
import FileInput from "../FormUI/FileInput";
import DateTime from "../FormUI/DateTimePicker";

const useStyles = makeStyles((theme) => ({
  page_content: {
    margin: theme.spacing(12),
    padding: theme.spacing(3),
  },
  paper: {
    display: "flex",
    justifyContent: "center",
    alignItems: "center",
    marginBottom: theme.spacing(3),
    padding: theme.spacing(3),
  },
  avatar: {
    backgroundColor: theme.palette.secondary.main,
    marginRight: theme.spacing(2),
  },
  field: {
    "& .MuiInputBase-root": {
      width: "80%",
      margin: theme.spacing(2, 1, 3),
    },
  },
  buttons: {
    marginLeft: theme.spacing(0),
  },
  box: {
    margin: theme.spacing(2, 0, 2),
  },
  checkbox: {
    margin: theme.spacing(2, 1, 3),
  },
}));

const EmployeeEdit = () => {
  const classes = useStyles();

  const history = useHistory();
  const params = useParams();

  const { data } = useGetEmployeesQuery();
  const prevEmployeeData = data;

  function search(nameKey, myArray) {
    for (var i = 0; i < myArray.length; i++) {
      if (myArray[i].id == params.id) {
        return myArray[i];
      }
    }
  }
  var resultObject = search(params.id, prevEmployeeData.data);
  const INITIAL_FORM_STATE = {
    first_name: resultObject.first_name,
    last_name: resultObject.last_name,
    email: resultObject.email,
    mobile: resultObject.mobile,
    landline: resultObject.landline,
    designation: resultObject.designation_id,
    gender: resultObject.gender,
    present_address: resultObject.present_address,
    permanent_address: resultObject.permanent_address,
    status: resultObject.status,
    join_date: new Date(resultObject.join_date).toLocaleDateString(),
    date_of_birth: new Date(resultObject.date_of_birth).toLocaleDateString(),
  };
  const FORM_VALIDATION = Yup.object().shape({
    first_name: Yup.string().required("Required"),
    last_name: Yup.string().required("Required"),
    email: Yup.string().email().required("Required"),
    present_address: Yup.string().required("Required"),
    gender: Yup.string().required("Required"),
    permanent_address: Yup.string().required("Required"),
    mobile: Yup.number().required("Required"),
    landline: Yup.number().required("Required"),
    join_date: Yup.date().nullable().required("Required"),
    date_of_birth: Yup.date().nullable().required("Required"),
    designation_id: Yup.string().required("Required"),
    status: Yup.string().required("Required"),
    profile_picture: Yup.mixed().required("Required"),
    resume: Yup.mixed().required("Required"),
  });

  const [updateEmloyee] = useUpdateEmployeeMutation();
  const result = useGetEmployeesQuery();

  return (
    <>
      <Paper className={classes.page_content}>
        <Container className={classes.paper}>
          <Avatar className={classes.avatar}>
            <PersonAddIcon />
          </Avatar>
          <Typography component="h1" variant="h5">
            Create Employee
          </Typography>
        </Container>
        <Formik
          initialValues={{
            ...INITIAL_FORM_STATE,
          }}
          validationSchema={FORM_VALIDATION}
          onSubmit={(values) => {
            const object = {
              id: params.id,
              first_name: values.fname,
              last_name: values.lname,
              join_date: new Date(values.join_date).toLocaleDateString(),
              date_of_birth: new Date(
                values.date_of_birth
              ).toLocaleDateString(),
              designation_id: values.designation,
              gender: values.gender,
              status: values.status,
              email: values.email,
              mobile: values.mobile,
              landline: values.landline,
              present_address: values.presentAddress,
              permanent_address: values.permenentAddress,
            };
            console.log(values);

            updateEmloyee(object)
              .then((payload) => {
                toast.success("Successfully added...", {
                  position: "top-center",
                  autoClose: 1000,
                });
                result.refetch();
                history.push("/employees");
                console.log(payload);
              })
              .catch((error) => {
                toast.error(error.message, {
                  position: "top-center",
                  autoClose: 1000,
                });
              });
          }}
        >
          <Form autoComplete="off">
            <Grid container>
              <Grid item xs={6}>
                <TextField
                  className={classes.field}
                  name="first_name"
                  label="First Name"
                />
                <TextField
                  className={classes.field}
                  name="last_name"
                  label="Last Name"
                />
                <TextField
                  className={classes.field}
                  name="email"
                  label="Email"
                />
                <TextField
                  className={classes.field}
                  name="mobile"
                  label="Mobile"
                />
                <TextField
                  className={classes.field}
                  name="landline"
                  label="Landline"
                />
                <DateTime
                  className={classes.field}
                  name="join_date"
                  label="Joing Date"
                />
                <DateTime
                  className={classes.field}
                  name="date_of_birth"
                  label="Date of Birth"
                />
                <Select
                  className={classes.field}
                  name="designation_id"
                  label="designation"
                  options={[
                    { id: 1, title: "React Developer" },
                    { id: 2, title: "Java Developer" },
                    { id: 3, title: "PHP Developer" },
                  ]}
                />
                <Select
                  className={classes.field}
                  label="Status"
                  name="status"
                  options={[
                    { id: "1", title: "Temporary" },
                    { id: "2", title: "Part Time" },
                    { id: "3", title: "Permanent" },
                  ]}
                />

                <div>
                  <Grid container spacing={2} className={classes.buttons}>
                    <Grid item>
                      <Button type="submit" color="primary" variant="contained">
                        Submit
                      </Button>
                    </Grid>
                    <Grid item>
                      <Button
                        color="secondary"
                        variant="contained"
                        component="label"
                        onClick={() => history.push("/employees")}
                      >
                        Cancel
                      </Button>
                    </Grid>
                  </Grid>
                </div>
              </Grid>
              <Grid item xs={6}>
                <RadioForm row name="gender" className={classes.box} />
                <TextField
                  className={classes.field}
                  name="present_address"
                  label="Present Address"
                  multiline
                  rows={4}
                />

                <TextField
                  className={classes.field}
                  name="permanent_address"
                  label="Permenent Address"
                  multiline
                  rows={4}
                />
              </Grid>
            </Grid>
          </Form>
        </Formik>
      </Paper>
    </>
  );
};

export default EmployeeEdit;
